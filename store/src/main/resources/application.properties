management.context-path=/management
management.security.enabled=false

feign.book=BookServer


feign.hystrix.enabled=true

# =============== CommonClientConfigKey&DefaultClientConfigImpl ===============
# 默认配置
ribbon.ConnectTimeout=2000
ribbon.ReadTimeout=5000
ribbon.ServerListRefreshInterval=30000

# 调用BookServer的连接超时
BookServer.ribbon.ConnectTimeout=1200
# 调用BookServer的读取超时
BookServer.ribbon.ReadTimeout=2100
# 本地缓存的BookServer的ServerList的刷新时间
BookServer.ribbon.ServerListRefreshInterval=600000
# BookServer调用时，当前Server重试次数（仅针对GET请求）
BookServer.ribbon.MaxAutoRetries=0
# BookServer调用时，其他Server重试次数（仅针对GET请求）
BookServer.ribbon.MaxAutoRetriesNextServer=2
#
# =============== HystrixCommandProperties ===============
## 断路器的默认开关
#hystrix.command.default.circuitBreaker.enabled=false
## fallback的默认开关
#hystrix.command.default.fallback.enabled=false
## command执行时间的默认大小
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=500
## 设置断路器强制打开
#hystrix.command.getBook.circuitBreaker.forceOpen=true

#
# =============== HystrixThreadPoolProperties ===============
#hystrix.threadpool.default.coreSize=6
hystrix.threadpool.BookServer.coreSize=10
hystrix.threadpool.BookServer.maxQueueSize=30
hystrix.threadpool.BookServer.queueSizeRejectionThreshold=30
# 设置打开断路器的请求数量的最小值
hystrix.command.BookFeignClient#getBook(Integer,Integer).circuitBreaker.requestVolumeThreshold=8
# 设置打开断路器的错误百分比，如果大于或者等于都会打开断路器
hystrix.command.BookFeignClient#getBook(Integer,Integer).circuitBreaker.errorThresholdPercentage=50
# 设置断路器开之后，把断路器设置成半开，进行尝试恢复的时间
hystrix.command.BookFeignClient#getBook(Integer,Integer).circuitBreaker.sleepWindowInMilliseconds=3000
# 设置一个Rolling window的时间，Rolling window就是一个统计的区间，在这个区间内对command的成功、失败进行统计，提供给断路器进行判断
hystrix.command.BookFeignClient#getBook(Integer,Integer).metrics.rollingStats.timeInMilliseconds=600000
# 把一个Rolling window拆分笑的buckets，能避免统计丢失、提高数据收集性能
hystrix.command.BookFeignClient#getBook(Integer,Integer).metrics.rollingStats.numBuckets=10

# test
#hystrix.command.Test-1.circuitBreaker.forceOpen=false
hystrix.threadpool.ThreadPool-1.coreSize=11
hystrix.threadpool.ThreadPool-1.maxQueueSize=20
hystrix.threadpool.ThreadPool-1.queueSizeRejectionThreshold=20


# 关于所有的HystrixThreadPoolProperties的配置，都是基于ThreadPoolKey的配置
# 全局的配置的threadPoolKey是default，如果需要修改，则增加配置，即可覆盖默认配置

# 默认的核心线程池数量
hystrix.threadpool.default.coreSize=5
# 针对ThreadPoolKey为ThreadPool-2设置线程池核心线程数量
hystrix.threadpool.ThreadPool-2.coreSize=10
# 针对ThreadPoolKey为ThreadPool-2设置线程池任务队列，如果不设置，会使用同步队列
hystrix.threadpool.ThreadPool-2.maxQueueSize=10
# 针对ThreadPoolKey为ThreadPool-2设置线程池任务队列拒绝阈值，因为线程池的maxQueueSize不可修改，这个参数可以动态修改
hystrix.threadpool.ThreadPool-2.queueSizeRejectionThreshold=10

hystrix.command.Test-2.execution.isolation.thread.timeoutInMilliseconds=8000

# 设置打开断路器的请求数量的最小值
hystrix.command.Test-2.circuitBreaker.requestVolumeThreshold=8
# 设置打开断路器的错误百分比，如果大于或者等于都会打开断路器
hystrix.command.Test-2.circuitBreaker.errorThresholdPercentage=50
# 设置断路器开之后，把断路器设置成半开，进行尝试恢复的时间
hystrix.command.Test-2.circuitBreaker.sleepWindowInMilliseconds=3000

# 设置一个Rolling window的时间，Rolling window就是一个统计的区间，在这个区间内对command的成功、失败进行统计，提供给断路器进行判断
hystrix.command.Test-2.metrics.rollingStats.timeInMilliseconds=400000
# 把一个Rolling window拆分笑的buckets，能避免统计丢失、提高数据收集性能
hystrix.command.Test-2.metrics.rollingStats.numBuckets=10